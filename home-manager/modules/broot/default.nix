{
  pkgs,
  #globals,
  ...
}:
#let
# Import the colorscheme system
#colors = import ../../lib/themes globals;
# Generate the HJSON skin content with colorscheme variables
#skinContent = import ./skins/dark-blue.nix { inherit colors; };
#in
{
  home.packages = with pkgs; [
    broot
  ];

  xdg.configFile."broot/conf.hjson".source = ./conf/conf.hjson;
  xdg.configFile."broot/verbs.hjson".source = ./conf/verbs.hjson;
  xdg.configFile."broot/launcher/select.hjson".source = ./launcher/select.hjson;
  xdg.configFile."broot/skin.hjson".source = ./skins/catppuccin-mocha.hjson;

  # Download and install the vscode font for broot icons
  home.file.".local/share/fonts/vscode.ttf".source = pkgs.fetchurl {
    url = "https://github.com/Canop/broot/raw/main/resources/icons/vscode/vscode.ttf";
    sha256 = "0ddk5sf25qaqw9azv1azcg0zssfcggmzjm564i69ngz3w9j0nx9a";
  };

  # Write br shell function to profile sources directory
  home.file.".local/state/profile-sources/br.sh".text = ''
    # This script was automatically generated by the broot program
    # More information can be found in https://github.com/Canop/broot
    # This function starts broot and executes the command
    # it produces, if any.
    # It's needed because some shell commands, like `cd`,
    # have no useful effect if executed in a subshell.
    function br {
        local cmd cmd_file code
        cmd_file=$(mktemp)
        if broot --outcmd "$cmd_file" "$@"; then
            cmd=$(<"$cmd_file")
            command rm -f "$cmd_file"
            # Replace 'cd' with 'builtin cd' to avoid zoxide interference
            cmd=''${cmd//cd /builtin cd }
            eval "$cmd"
        else
            code=$?
            command rm -f "$cmd_file"
            return "$code"
        fi
    }
  '';
}
