#!/usr/bin/env bash
# Unified bootstrap entry point - replaces old bootstrap.sh
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
CACHE_DIR="$HOME/.cache/nix-bootstrap"
mkdir -p "$CACHE_DIR"

# Colors for consistent output
readonly BLUE='\033[0;34m'
readonly GREEN='\033[0;32m'
readonly RED='\033[0;31m'
readonly NC='\033[0m'

info() { echo -e "${BLUE}→${NC} $1"; }
success() { echo -e "${GREEN}✓${NC} $1"; }
error() { echo -e "${RED}✗${NC} $1" >&2; }

# Function to get cached bootstrap utilities
get_bootstrap_utils() {
    local lib_hash
    lib_hash=$(find "$SCRIPT_DIR/lib" -name "*.nix" -exec nix-hash --type sha256 {} \; | sort | nix-hash --type sha256)
    local cache_file="$CACHE_DIR/bootstrap-utils-$lib_hash"
    
    if [[ ! -f "$cache_file" ]]; then
        info "Building bootstrap utilities (one-time setup)..."
        nix-build --no-out-link --show-trace \
            -E "import $SCRIPT_DIR/lib/installer.nix" > "$cache_file"
    fi
    
    cat "$cache_file"
}

# Parse arguments
HOSTNAME="${1:-$(hostname)}"
GIT_URL="${2:-}"
REPO_DIR="$(basename "$(pwd)")"
SKIP_NIX_INSTALL=false
AUTO_BOOTSTRAP=false
HELP=false

if [[ "$HOSTNAME" == "--help" ]] || [[ "$HOSTNAME" == "-h" ]]; then
    HELP=true
fi

shift 2>/dev/null || true
shift 2>/dev/null || true

# Parse additional flags
while [[ $# -gt 0 ]]; do
    case $1 in
        --repo-dir) REPO_DIR="$2"; shift 2 ;;
        --skip-nix-install) SKIP_NIX_INSTALL=true; shift ;;
        --auto-bootstrap) AUTO_BOOTSTRAP=true; shift ;;
        --help|-h) HELP=true; shift ;;
        *) error "Unknown option: $1"; HELP=true; break ;;
    esac
done

if [[ "$HELP" == "true" ]]; then
    echo "NixOS Bootstrap Tool"
    echo
    echo "Usage: $0 [hostname] [git-clone-url] [options]"
    echo
    echo "Arguments:"
    echo "  hostname           Target hostname (auto-detected: $(hostname))"
    echo "  git-clone-url      Optional URL to clone config from"
    echo
    echo "Options:"
    echo "  --repo-dir <dir>        Repository directory name (default: current directory name)"
    echo "  --skip-nix-install      Skip Nix installation step"
    echo "  --auto-bootstrap        Automatically bootstrap without prompts"
    echo "  --help, -h              Show this help"
    echo
    echo "Examples:"
    echo "  $0 nixos                                    # Bootstrap locally"
    echo "  $0 nixos https://github.com/user/repo.git  # Clone and bootstrap"
    echo "  $0 nixos --auto-bootstrap                   # Non-interactive bootstrap"
    echo
    echo "Steps performed:"
    echo "  1. Install Nix (if needed)"
    echo "  2. Configure Nix with flakes"
    echo "  3. Setup git repository"
    echo "  4. Install Home Manager"
    echo "  5. Validate configuration"
    echo "  6. Bootstrap system/home-manager"
    exit 0
fi

# Check if running as root
if [[ $EUID -eq 0 ]]; then
    error "Don't run this script as root. Run as your normal user."
    exit 1
fi

# Get cached utilities (try to build, but continue if it fails - Nix might not be installed yet)
if command -v nix &>/dev/null; then
    UTILS_PATH="$(get_bootstrap_utils)"
    
    # Build bootstrap pipeline
    BUILDER="$UTILS_PATH.bootstrapPipeline { 
        hostname = \"$HOSTNAME\"; 
        ${if [[ -n "$GIT_URL" ]]; then "gitUrl = \"$GIT_URL\";"; fi}
        repoDir = \"$REPO_DIR\";
        skipNixInstall = $SKIP_NIX_INSTALL;
        autoBootstrap = $AUTO_BOOTSTRAP;
    }"
    
    info "Executing bootstrap for $HOSTNAME..."
    BOOTSTRAP_SCRIPT=$(nix-build --no-out-link --show-trace -E "$BUILDER")
    exec "$BOOTSTRAP_SCRIPT/bin/bootstrap-$HOSTNAME"
else
    # Fallback for when Nix isn't installed yet
    info "Nix not found, using fallback bootstrap..."
    
    # Basic Nix installation
    if ! command -v nix &>/dev/null; then
        info "Installing Nix..."
        curl -L https://nixos.org/nix/install | sh -s -- --daemon
        # shellcheck source=/dev/null
        source ~/.nix-profile/etc/profile.d/nix.sh 2>/dev/null || true
        success "Nix installed"
    fi
    
    # Configure Nix
    info "Configuring Nix..."
    mkdir -p ~/.config/nix
    echo "experimental-features = nix-command flakes" > ~/.config/nix/nix.conf
    
    # Now retry with the full bootstrap
    info "Retrying with full bootstrap system..."
    exec "$0" "$HOSTNAME" "$GIT_URL" "${@}"
fi