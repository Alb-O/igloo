#!/usr/bin/env bash
# WSL configuration sync tool
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# Colors for output
readonly BLUE='\033[0;34m'
readonly GREEN='\033[0;32m'
readonly RED='\033[0;31m'
readonly YELLOW='\033[0;33m'
readonly NC='\033[0m'

info() { echo -e "${BLUE}→${NC} $1"; }
success() { echo -e "${GREEN}✓${NC} $1"; }
error() { echo -e "${RED}✗${NC} $1" >&2; }
warn() { echo -e "${YELLOW}⚠${NC} $1"; }

# Parse arguments
CONFIG=""
HELP=false
LIST=false
BUNDLE=""

while [[ $# -gt 0 ]]; do
    case $1 in
        # Options (must come before configs to avoid conflicts)
        --list|-l) LIST=true; shift ;;
        --help|-h) HELP=true; shift ;;
        
        # Bundles
        --dev|--development) BUNDLE="dev"; shift ;;
        --browser) BUNDLE="browser"; shift ;;
        --all) BUNDLE="all"; shift ;;
        
        # Individual configs - handle both with and without dashes
        firefox|ff|--firefox|--ff) CONFIG="firefox"; shift ;;
        firefox-bookmarks|ff-bookmarks|--firefox-bookmarks|--ff-bookmarks) CONFIG="firefox-bookmarks"; shift ;;
        firefox-extensions|ff-extensions|--firefox-extensions|--ff-extensions) CONFIG="firefox-extensions"; shift ;;
        
        vscode|vs|--vscode|--vs) CONFIG="vscode"; shift ;;
        vscode-settings|--vscode-settings) CONFIG="vscode-settings"; shift ;;
        vscode-keybindings|--vscode-keybindings) CONFIG="vscode-keybindings"; shift ;;
        vscode-snippets|--vscode-snippets) CONFIG="vscode-snippets"; shift ;;
        vscode-extensions|--vscode-extensions) CONFIG="vscode-extensions"; shift ;;
        
        git|--git) CONFIG="git"; shift ;;
        git-config|--git-config) CONFIG="git-config"; shift ;;
        git-ssh|--git-ssh) CONFIG="git-ssh"; shift ;;
        git-credentials|--git-credentials) CONFIG="git-credentials"; shift ;;
        
        # Catch-all for unknown options starting with --
        --*) 
            error "Unknown option: $1"
            HELP=true
            shift
            ;;
        
        # Positional arguments (config names without dashes)
        *) 
            if [[ -z "$CONFIG" && -z "$BUNDLE" ]]; then
                CONFIG="$1"
            else
                error "Multiple configurations specified: previous '${CONFIG:-$BUNDLE}' and '$1'"
                HELP=true
            fi
            shift 
            ;;
    esac
done

if [[ "$HELP" == "true" ]]; then
    echo "WSL Configuration Sync Tool"
    echo "=========================="
    echo
    echo "Usage: $0 [config|bundle] [options]"
    echo
    echo "Application Bundles:"
    echo "  --dev, --development     Sync development tools (Git + VSCode)"
    echo "  --browser               Sync browser configuration (Firefox)"
    echo "  --all                   Sync everything"
    echo
    echo "Individual Applications:"
    echo "  firefox, ff             Complete Firefox configuration (WSL → Windows)"
    echo "  firefox-bookmarks       Firefox bookmarks only (WSL → Windows)"
    echo "  firefox-extensions      Firefox extensions only (WSL → Windows)"
    echo
    echo "  vscode, vs              Complete VSCode configuration"
    echo "  vscode-settings         VSCode settings only"
    echo "  vscode-keybindings      VSCode keybindings only"
    echo "  vscode-snippets         VSCode snippets only"
    echo "  vscode-extensions       Export VSCode extensions list"
    echo
    echo "  git                     Complete Git setup"
    echo "  git-config              Git configuration only"
    echo "  git-ssh                 SSH keys only"
    echo "  git-credentials         Git credentials setup"
    echo
    echo "Options:"
    echo "  --list, -l              List all available configurations"
    echo "  --help, -h              Show this help"
    echo
    echo "Examples:"
    echo "  $0 firefox              # Sync Firefox from WSL to Windows"
    echo "  $0 --dev                # Sync development tools"
    echo "  $0 vscode-settings      # Sync only VSCode settings"
    echo "  $0 --list               # Show detailed list of options"
    echo
    exit 0
fi

if [[ "$LIST" == "true" ]]; then
    info "Building application list..."
    LIST_SCRIPT=$(nix-build --no-out-link --show-trace \
        -E "(import $SCRIPT_DIR/lib/plugins/wsl.nix).listApplications" 2>/dev/null)
    
    if [[ $? -ne 0 ]]; then
        error "Failed to build application list"
        exit 1
    fi
    
    exec "$LIST_SCRIPT/bin/list-wsl-apps"
fi

# Validate WSL environment
if [[ -z "${WSL_DISTRO_NAME:-}" ]] && 
   ! grep -qi "microsoft.*wsl" /proc/version 2>/dev/null && 
   [[ ! -d "/mnt/c" ]]; then
    error "This tool requires WSL environment"
    exit 1
fi

# Handle bundles
if [[ -n "$BUNDLE" ]]; then
    info "Building bundle: $BUNDLE"
    case "$BUNDLE" in
        "dev")
            SYNC_SCRIPT=$(nix-build --no-out-link --show-trace \
                -E "(import $SCRIPT_DIR/lib/plugins/wsl.nix).bundles.dev" 2>/dev/null)
            ;;
        "browser")
            SYNC_SCRIPT=$(nix-build --no-out-link --show-trace \
                -E "(import $SCRIPT_DIR/lib/plugins/wsl.nix).bundles.browser" 2>/dev/null)
            ;;
        "all")
            SYNC_SCRIPT=$(nix-build --no-out-link --show-trace \
                -E "(import $SCRIPT_DIR/lib/plugins/wsl.nix).bundles.all" 2>/dev/null)
            ;;
        *)
            error "Unknown bundle: $BUNDLE"
            exit 1
            ;;
    esac
else
    # Handle individual configurations
    # Default to firefox if no config specified
    if [[ -z "$CONFIG" ]]; then
        CONFIG="firefox"
        info "No configuration specified, defaulting to Firefox"
    fi

    info "Building sync tool for: $CONFIG"
    SYNC_SCRIPT=$(nix-build --no-out-link --show-trace \
        -E "(import $SCRIPT_DIR/lib/plugins/wsl.nix).getSyncUtility \"$CONFIG\"" 2>/dev/null)
fi

if [[ $? -ne 0 ]]; then
    error "Failed to build sync script for: ${CONFIG:-$BUNDLE}"
    echo "Run '$0 --list' to see available options"
    exit 1
fi

# Find and execute the sync tool
EXECUTABLE=$(find "$SYNC_SCRIPT/bin" -type f -executable | head -1)

if [[ -x "$EXECUTABLE" ]]; then
    exec "$EXECUTABLE"
else
    error "Sync executable not found or not executable: $EXECUTABLE"
    exit 1
fi